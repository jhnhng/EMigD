[{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jhnhng.github.io/EMigD/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jhnhng.github.io/EMigD/articles/01 Setting Up the Data.html","id":"setting-up-the-data","dir":"Articles","previous_headings":"","what":"Setting Up the Data","title":"Setting Up the Data","text":"example shown one many ways data processed. important components required list object containing home range kernels interval created least one individual. example, single individual wanted break one month period 10-day intervals get total three 10-day intervals. intervals list object, element within list represent single interval. selected periods divided intervals chosen fall migratory trips don’t overlap . example individuals typically begin migratory trip spring fall, selected periods overlap spring fall, winter summer seasons.","code":""},{"path":"https://jhnhng.github.io/EMigD/articles/01 Setting Up the Data.html","id":"create-intervals","dir":"Articles","previous_headings":"Setting Up the Data","what":"Create Intervals","title":"Setting Up the Data","text":"created 10-day intervals deer January July. first created start column using floor_Date() function obtain 10-day extents within months. included 31st day (month 31 days) third 10-day interval prevent creation 4th 10-day interval single day .","code":""},{"path":"https://jhnhng.github.io/EMigD/articles/01 Setting Up the Data.html","id":"intervals-for-january","dir":"Articles","previous_headings":"Setting Up the Data","what":"Intervals for January","title":"Setting Up the Data","text":"","code":"jan <- deer %>%   # Creates a start column assigning the first day in the 10-day interval in which   # the date falls under (e.g., 01-03-2021 would be in the first 10-day interval   # so the `floor_date` assigned to it would be 01-01-2021)   mutate(start = floor_date(date, \"10 days\")) %>%   # For any months that has 31 days, the 31st day would normally be assigned its    # own interval. The code below takes the 31st day and joins it with the    # previous interval.    group_by(ID) %>%    mutate(start = if_else(day(start) == 31, start - days(10), start)) %>%    group_by(start, .add = TRUE) %>%   filter(month == \"1\") %>%    group_split()"},{"path":"https://jhnhng.github.io/EMigD/articles/01 Setting Up the Data.html","id":"intervals-for-july","dir":"Articles","previous_headings":"Setting Up the Data","what":"Intervals for July","title":"Setting Up the Data","text":"Elements list one individual January:","code":"july <- deer %>%   # Creates a start column assigning the first day in the 10-day interval in which   # the date falls under (e.g., 01-03-2021 would be in the first 10-day interval   # so the `floor_date` assigned to it would be 01-01-2021)   mutate(start = floor_date(date, \"10 days\")) %>%   # For any months that has 31 days, the 31st day would normally be assigned its    # own interval. The code below takes the 31st day and joins it with the    # previous interval.    group_by(ID) %>%    mutate(start = if_else(day(start) == 31, start - days(10), start)) %>%    group_by(start, .add = TRUE) %>%   filter(month == \"7\") %>%    group_split() head(jan[1:3]) #> <list_of< #>   tbl_df< #>     date  : date #>     utm_x : double #>     utm_y : double #>     ID    : character #>     julian: double #>     month : double #>     year  : double #>     start : date #>   > #> >[3]> #> [[1]] #> # A tibble: 17 × 8 #>    date         utm_x    utm_y ID    julian month  year start      #>    <date>       <dbl>    <dbl> <chr>  <dbl> <dbl> <dbl> <date>     #>  1 2013-01-01 394353. 4222160. A          1     1  2013 2013-01-01 #>  2 2013-01-04 425764. 4269724. A          4     1  2013 2013-01-01 #>  3 2013-01-07 426686. 4244820. A          7     1  2013 2013-01-01 #>  4 2013-01-10 385763. 4176823. A         10     1  2013 2013-01-01 #>  5 2013-01-03 444235. 4136620. A          3     1  2013 2013-01-01 #>  6 2013-01-06 281915. 4194640. A          6     1  2013 2013-01-01 #>  7 2013-01-09 316328. 4247506. A          9     1  2013 2013-01-01 #>  8 2013-01-02 444606. 4220499. A          2     1  2013 2013-01-01 #>  9 2013-01-05 413878. 4105887. A          5     1  2013 2013-01-01 #> 10 2013-01-08 436514. 4239651. A          8     1  2013 2013-01-01 #> 11 2013-01-01 447905. 4140465. A          1     1  2013 2013-01-01 #> 12 2013-01-04 399696. 4271535. A          4     1  2013 2013-01-01 #> 13 2013-01-07 270352. 4163344. A          7     1  2013 2013-01-01 #> 14 2013-01-10 403482. 4166581. A         10     1  2013 2013-01-01 #> 15 2013-01-03 343761. 4121445. A          3     1  2013 2013-01-01 #> 16 2013-01-06 371862. 4129096. A          6     1  2013 2013-01-01 #> 17 2013-01-09 239170. 4216780. A          9     1  2013 2013-01-01 #>  #> [[2]] #> # A tibble: 16 × 8 #>    date         utm_x    utm_y ID    julian month  year start      #>    <date>       <dbl>    <dbl> <chr>  <dbl> <dbl> <dbl> <date>     #>  1 2013-01-13 243076. 4183446. A         13     1  2013 2013-01-11 #>  2 2013-01-16 277679. 4168675. A         16     1  2013 2013-01-11 #>  3 2013-01-19 306373. 4188378. A         19     1  2013 2013-01-11 #>  4 2013-01-12 442920. 4195152. A         12     1  2013 2013-01-11 #>  5 2013-01-15 441155. 4203151. A         15     1  2013 2013-01-11 #>  6 2013-01-18 369790. 4240183. A         18     1  2013 2013-01-11 #>  7 2013-01-11 303512. 4209028. A         11     1  2013 2013-01-11 #>  8 2013-01-14 308519. 4221374. A         14     1  2013 2013-01-11 #>  9 2013-01-17 374148. 4162971. A         17     1  2013 2013-01-11 #> 10 2013-01-20 397508. 4097868. A         20     1  2013 2013-01-11 #> 11 2013-01-13 320893. 4225999. A         13     1  2013 2013-01-11 #> 12 2013-01-16 241850. 4209139. A         16     1  2013 2013-01-11 #> 13 2013-01-19 262219. 4270200. A         19     1  2013 2013-01-11 #> 14 2013-01-12 257607. 4269495. A         12     1  2013 2013-01-11 #> 15 2013-01-15 371683. 4170130. A         15     1  2013 2013-01-11 #> 16 2013-01-18 259174. 4101256. A         18     1  2013 2013-01-11 #>  #> [[3]] #> # A tibble: 19 × 8 #>    date         utm_x    utm_y ID    julian month  year start      #>    <date>       <dbl>    <dbl> <chr>  <dbl> <dbl> <dbl> <date>     #>  1 2013-01-22 257936. 4152519. A         22     1  2013 2013-01-21 #>  2 2013-01-25 379787. 4205195. A         25     1  2013 2013-01-21 #>  3 2013-01-28 352528. 4174215. A         28     1  2013 2013-01-21 #>  4 2013-01-31 426091. 4202516. A         31     1  2013 2013-01-21 #>  5 2013-01-21 412662. 4219820. A         21     1  2013 2013-01-21 #>  6 2013-01-24 374377. 4181390. A         24     1  2013 2013-01-21 #>  7 2013-01-27 383701. 4112081. A         27     1  2013 2013-01-21 #>  8 2013-01-30 268919. 4211473. A         30     1  2013 2013-01-21 #>  9 2013-01-23 371091. 4139747. A         23     1  2013 2013-01-21 #> 10 2013-01-26 290570. 4188197. A         26     1  2013 2013-01-21 #> 11 2013-01-29 384754. 4269268. A         29     1  2013 2013-01-21 #> 12 2013-01-22 346652. 4207052. A         22     1  2013 2013-01-21 #> 13 2013-01-25 257383. 4203716. A         25     1  2013 2013-01-21 #> 14 2013-01-28 251854. 4162917. A         28     1  2013 2013-01-21 #> 15 2013-01-31 334382. 4218896. A         31     1  2013 2013-01-21 #> 16 2013-01-21 375032. 4117669. A         21     1  2013 2013-01-21 #> 17 2013-01-24 299099. 4242995. A         24     1  2013 2013-01-21 #> 18 2013-01-27 313090. 4107096. A         27     1  2013 2013-01-21 #> 19 2013-01-30 302671. 4257404. A         30     1  2013 2013-01-21"},{"path":"https://jhnhng.github.io/EMigD/articles/01 Setting Up the Data.html","id":"create-tracks-for-each-interval","dir":"Articles","previous_headings":"","what":"Create Tracks for Each Interval","title":"Setting Up the Data","text":"estimate LoCoH home range 10-day intervals, first create objects class track_xyt using make_track() amt package. function creates track using utm_x utm_y columns jan july. lapply() allows us apply specified function across list object (e.g., jan july)","code":"track_list_sum <- lapply(july, function(x) {   amt::make_track(tbl = x, .x = utm_x, .y = utm_y, .t = date,              uid = ID,              # lat/long: 4326 (lat/long, WGS84 datum).              # utm: crs = sp::CRS(\"+init=epsg:32612\"))              crs = 32612) }) track_list_win <- lapply(jan, function(x) {   amt::make_track(tbl = x, .x = utm_x, .y = utm_y, .t = date,              uid = ID,              crs = 32612) })"},{"path":"https://jhnhng.github.io/EMigD/articles/01 Setting Up the Data.html","id":"creates-locohs-using-the-tracks","dir":"Articles","previous_headings":"","what":"Creates LoCoHs Using the Tracks","title":"Setting Up the Data","text":"Using track created jan july, estimate type “” LoCoH home range using hr_locoh() amt package. like learn arguments function please refer ?amt::hr_locoh details.","code":"sum_locoh <- lapply(track_list_sum, function(tracks){     # Calculate LoCoH a*     dmat <- dist(tracks[, c(\"x_\", \"y_\")])     a <- max(dmat)      # Fit LoCoH     locoh <- try(amt::hr_locoh(       x = tracks,       levels = seq(0.1, 1, by = 0.1),       keep.data = TRUE,       n = a,       type = \"a\",       rand_buffer = 1e-05     ))           }) win_locoh <- lapply(track_list_win, function(tracks){     # Calculate LoCoH a*     dmat <- dist(tracks[, c(\"x_\", \"y_\")])     a <- max(dmat)      # Fit LoCoH     locoh <- try(amt::hr_locoh(       x = tracks,       levels = seq(0.1, 1, by = 0.1),       keep.data = TRUE,       n = a,       type = \"a\",       rand_buffer = 1e-05     ))           })"},{"path":"https://jhnhng.github.io/EMigD/articles/01 Setting Up the Data.html","id":"creates-isopleths-from-the-locohs","dir":"Articles","previous_headings":"","what":"Creates Isopleths from the LoCoHs","title":"Setting Up the Data","text":"created isopleths LoCoH home range estimates using hr_isopleths()amt package.","code":"sum_iso <- lapply(sum_locoh, function(x){   amt::hr_isopleths(x) }) win_iso <- lapply(win_locoh, function(x){   amt::hr_isopleths(x) })"},{"path":"https://jhnhng.github.io/EMigD/articles/01 Setting Up the Data.html","id":"rasterizes-the-isopleths","dir":"Articles","previous_headings":"","what":"Rasterizes the Isopleths","title":"Setting Up the Data","text":"creating isopleths intervals, rasterize . Similar previous functions, use lapply() apply function across list object. first select resolution want rasters (res). create template raster resolution res (keep mind speed isopleths rasterize() dependent specified resolution, time processing increasing smaller resolutions). projection template raster match specified isopleth. creating rasters interval, subtract isopleth values 1, normalize .","code":"res <- 250  sum_raster <- lapply(sum_iso, function(iso){ # Creates template raster     template_raster <- raster::raster(iso,       resolution = res, vals = 0,       crs = sp::CRS(sf::st_crs(iso)[[2]])     )     # Rasterizes the isopleth     raster_locoh <- raster::rasterize(iso,       template_raster,       field = \"level\",       fun = \"first\"     )      # Now you want to subtract all the isopleth values from 1     raster::values(raster_locoh) <- 1 - raster::values(raster_locoh)      # Now normalize     x <- raster_locoh / raster::cellStats(raster_locoh, sum) })  win_raster <- lapply(win_iso, function(iso){ # Creates template raster     template_raster <- raster::raster(iso,          resolution = res, vals = 0,       crs = sp::CRS(sf::st_crs(iso)[[2]])     )     # Rasterizes the isopleth     raster_locoh <- raster::rasterize(iso,       template_raster,       field = \"level\",       fun = \"first\"     )      # Now you want to subtract all the isopleth values from 1     raster::values(raster_locoh) <- 1 - raster::values(raster_locoh)      # Now normalize     x <- raster_locoh / raster::cellStats(raster_locoh, sum) })  names(win_raster) <- sapply(jan, function(x) paste(x$ID[1],                                             x$year[1], sep = '_'))  names(sum_raster) <- sapply(july, function(x) paste(x$ID[1],                                               x$year[1], sep = '_'))"},{"path":"https://jhnhng.github.io/EMigD/articles/01 Setting Up the Data.html","id":"attach-attributes-to-each-list-of-rasters","dir":"Articles","previous_headings":"Rasterizes the Isopleths","what":"Attach attributes to each list of rasters","title":"Setting Up the Data","text":"attach attributes list rasters allow flexibility working lists rasters.","code":"# Add an attribute to hold the attributes of each list element attributes(win_raster) <- data.frame(id = sapply(jan, function(x) paste(x$ID[1])),                                       interval_start_date = sapply(jan, function(x) paste(x$start[1])),                                       year = paste0(sapply(jan, function(x) paste(x$year[1]))) )  # Check the attributes attributes(win_raster)  # Add an attribute \"tab\" to hold the attributes of each list element attributes(sum_raster) <- data.frame(id = sapply(july, function(x) paste(x$ID[1])),                                       interval_start_date = sapply(july, function(x) paste(x$start[1])),                                       year = paste0(sapply(july, function(x) paste(x$year[1]))) )  # Check the attributes attributes(sum_raster)"},{"path":"https://jhnhng.github.io/EMigD/articles/01 Setting Up the Data.html","id":"setting-up-input-for-calculating-emds-in-environmental-space","dir":"Articles","previous_headings":"","what":"Setting up input for Calculating EMDs in Environmental Space","title":"Setting Up the Data","text":"data set specifically focused setting data calculating EMDs geographical space. code demonstrates can set data calculate EMDs environmental space.","code":""},{"path":[]},{"path":"https://jhnhng.github.io/EMigD/articles/01 Setting Up the Data.html","id":"environmental-covariates-without-temporal-variation","dir":"Articles","previous_headings":"Setting up input for Calculating EMDs in Environmental Space > Creating ‘RasterStacks’ to calculate EMD and ’EM-Speeds in Environmental Space","what":"Environmental Covariates without Temporal Variation","title":"Setting Up the Data","text":"first import environmental covariate file (e.g., DEM layer), re-project extent latitude longitude UTMs match home range rasters. env_raster_stack() function takes environmental covariate raster resamples home range rasters. takes resampled rasters home range rasters constructs object class RasterStack. steps following creation RasterStacks steps “Earth Mover’s Distance”, RasterLayers objects (.e., sum_raster win_raster) replaced RasterStack objects (.e., sum_rst win_rst).","code":"#Load raster   UtahDEM <- raster::raster(system.file(\"extdata\", \"Utah_DEM.tif\", package = \"EMigD\"))   out_proj <- \"+proj=utm +zone=12 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0\"   UtahDEM@extent <- raster::extent(raster::projectExtent(UtahDEM, out_proj)) sum_rst <- env_raster_stack(UtahDEM, sum_raster) win_rst <- env_raster_stack(UtahDEM, win_raster)"},{"path":"https://jhnhng.github.io/EMigD/articles/01 Setting Up the Data.html","id":"environmental-covariates-with-temporal-variation","dir":"Articles","previous_headings":"Setting up input for Calculating EMDs in Environmental Space > Creating ‘RasterStacks’ to calculate EMD and ’EM-Speeds in Environmental Space","what":"Environmental Covariates with Temporal Variation","title":"Setting Up the Data","text":"environmental covariates vary across time (e.g., temperature, snow depth, foraging resources, precipitation, etc.), first assign file names covariates housed list_names. example, use Rangeland Analysis Platform (RAP) data 2013 2014 can indicator forage resources landscape. read files R RasterLayer objects. list elements env_lists assign path names files. Using assigned names, created attributes(metadata) list year column. year column may change depending temporal scale environmental covariate. example, environmental covariates changed daily, can first aggregate daily covariates based intervals. Instead using year, use start date intervals. use env_raster_stack addition attribute argument stack environmental covariate layers home range rasters. input attribute argument attribute component list objects (.e., env_list sum_raster/win_raster) unique values. example, env_list sum_raster/win_raster attribute component labelled year unique values (e.g., 2013 2014). NOTE: Currently feature assumes environmental layers relevant sum_raster win_raster used folder(.e., excluding present sum_raster /win_raster.)","code":"list_names <- list.files(path=system.file(\"extdata\", package = \"EMigD\"),                  pattern=c(\"RAP\",\"*.tif\"), all.files= FALSE,                  full.names = TRUE)   basename(list_names) #> [1] \"2013_RAP.tif\" \"2014_RAP.tif\" # Rasterize the environmental covariates env_list <- lapply(list_names, raster::raster)  names(env_list) <- sapply(list_names, function(x) paste(x))  # Uses the name of the environemntal covariate file to assign attributes  attributes(env_list) <- data.frame(year = trimws(basename(names(env_list)),                                                   whitespace = \"_.*\"))  attributes(env_list) #> $year #> [1] \"2013\" \"2014\" sum_rst_temporal <- env_raster_stack(env_list, sum_raster, attribute = \"year\") win_rst_temporal <- env_raster_stack(env_list, win_raster, attribute = \"year\")"},{"path":[]},{"path":"https://jhnhng.github.io/EMigD/articles/02 Different intervals between seasons.html","id":"create-intervals","dir":"Articles","previous_headings":"Setting Up the Data","what":"Create Intervals","title":"Different intervals between seasons","text":"created 10-day intervals deer January July. first created start column using floor_Date() function obtain 10-day extents within months. included 31st day (month 31 days) third 10-day interval prevent creation 4th 10-day interval single day .","code":""},{"path":"https://jhnhng.github.io/EMigD/articles/02 Different intervals between seasons.html","id":"intervals-for-january","dir":"Articles","previous_headings":"Setting Up the Data","what":"Intervals for January","title":"Different intervals between seasons","text":"Let’s remove list elements jan interval different number intervals jan july.","code":"jan <- deer %>%   # Creates a start column assigning the first day in the 10-day interval in which   # the date falls under (e.g., 01-03-2021 would be in the first 10-day interval   # so the `floor_date` assigned to it would be 01-01-2021)   mutate(start = floor_date(date, \"10 days\")) %>%   # For any months that has 31 days, the 31st day would normally be assigned its    # own interval. The code below takes the 31st day and joins it with the    # previous interval.    group_by(ID) %>%    mutate(start = if_else(day(start) == 31, start - days(10), start)) %>%    group_by(start, .add = TRUE) %>%   filter(month == \"1\") %>%    group_split() jan <- jan[-c(17,18)]"},{"path":"https://jhnhng.github.io/EMigD/articles/02 Different intervals between seasons.html","id":"intervals-for-july","dir":"Articles","previous_headings":"Setting Up the Data","what":"Intervals for July","title":"Different intervals between seasons","text":"","code":"july <- deer %>%   # Creates a start column assigning the first day in the 10-day interval in which   # the date falls under (e.g., 01-03-2021 would be in the first 10-day interval   # so the `floor_date` assigned to it would be 01-01-2021)   mutate(start = floor_date(date, \"10 days\")) %>%   # For any months that has 31 days, the 31st day would normally be assigned its    # own interval. The code below takes the 31st day and joins it with the    # previous interval.    group_by(ID) %>%    mutate(start = if_else(day(start) == 31, start - days(10), start)) %>%    group_by(start, .add = TRUE) %>%   filter(month == \"7\") %>%    group_split()"},{"path":"https://jhnhng.github.io/EMigD/articles/02 Different intervals between seasons.html","id":"assign-names-to-the-list-elements","dir":"Articles","previous_headings":"Setting Up the Data","what":"Assign names to the list elements","title":"Different intervals between seasons","text":"names assigned list element specific interval. case, use ID start columns list element assign name. names important later used determine elements missing two list objects.","code":"names(jan) <- sapply(jan, function(x) paste(x$ID[1],                                             x$start[1], sep = '_'))  names(july) <- sapply(july, function(x) paste(x$ID[1],                                               x$start[1],sep = '_'))"},{"path":"https://jhnhng.github.io/EMigD/articles/02 Different intervals between seasons.html","id":"matching-intervals","dir":"Articles","previous_headings":"Setting Up the Data","what":"Matching Intervals","title":"Different intervals between seasons","text":"Using match_intervals function can match number intervals july jan. case, first argument list1 reference list second argument list2.","code":"july <- match_intervals(list1 = jan, list2 = july)"},{"path":"https://jhnhng.github.io/EMigD/articles/03 Using-EmigD.html","id":"earth-movers-distance","dir":"Articles","previous_headings":"","what":"Earth Mover’s Distance","title":"Using the functions in `EMigD`","text":"earth mover’s distance (EMD), also known Wasserstein metric, measure distance two probability distributions region. example, distributions two different ways piling certain amount dirt region, EMD minimum effort needed turning one pile , cost assumed amount dirt moved times distance moved.","code":""},{"path":"https://jhnhng.github.io/EMigD/articles/03 Using-EmigD.html","id":"emds","dir":"Articles","previous_headings":"","what":"EMDs","title":"Using the functions in `EMigD`","text":"Calculates EMD’s summer winter UDs. example, seasons[[1]] seasons[[2]] used calculate EMDs geographical space, sum_rst win_rst used calculate EMDs environmental space. Calculates EMDs intervals within single season.","code":"# Geographical Space btwemd_geo <- between_emd(sum_raster, win_raster)  # Environmental Space btwemd_env <- between_emd(sum_rst, win_rst) # Geographical Space withsum_geo <- within_emd(sum_raster) withwin_geo <- within_emd(win_raster)  # Environmental Space withsum_env <- within_emd(sum_rst) withwin_env <- within_emd(win_rst)"},{"path":"https://jhnhng.github.io/EMigD/articles/03 Using-EmigD.html","id":"em-speeds","dir":"Articles","previous_headings":"","what":"EM-Speeds","title":"Using the functions in `EMigD`","text":"Calculate ‘EM-speeds’ dividing EMD time elapsed two UDs corresponds . example, calculate EM-speeds first intervals jan july, EMDs intervals divided difference Julian dates starts dates interval. $EMD /(Julian.start.2 - Julian.start.1) $ calculated EM-speeds seasons (e.g., first intervals jan july), within seasons (e.g., first second intervals jan july) using emspeeds() EMigD package. example demonstrates calculation EM-speeds geographical space, can easily replaced btwemd_env, withsum_env withwin_env.","code":"btwesp <- emspeeds(july, jan, btwemd_geo)  wesp_sum <- emspeeds(july, july, withsum_geo) wesp_win <- emspeeds(jan, jan, withwin_geo)"},{"path":"https://jhnhng.github.io/EMigD/articles/03 Using-EmigD.html","id":"average-within-and-between-season-em-speeds","dir":"Articles","previous_headings":"","what":"Average Within and Between Season EM-Speeds","title":"Using the functions in `EMigD`","text":"calculated average -season within-season EM-speeds, unique value counted zeros excluded. animal shift space use season, within-season EM-speeds similar -seasons EM-speeds. ratio two averages migratory predictors limitless. Values closer 0 may indicate individual migrate given year, values 0 may indicate individual migrated. results can extracted placed data frame can written .csv file preferred file type.","code":"btwavg_geo <- lapply(btwesp, function(x) mean(unique(x[x!= 0])))  wesp_both <- Map(c, wesp_sum, wesp_win) wesavg_geo <- lapply(wesp_all, function(x) mean(unique(x[x!= 0]))) predictor <- Map(\"/\", btwavg_geo, wavg_geo) out <- transform(read.table(text = unlist(unique(names(win_raster))), header = FALSE,                              col.names = c(\"ID\", \"Year\"), sep = \"_\"),                  geo = unlist(predictor))  write.csv(x=out, file=\"Data/Results.csv\")"},{"path":"https://jhnhng.github.io/EMigD/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Huang. Author, maintainer.","code":""},{"path":"https://jhnhng.github.io/EMigD/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Huang J (2022). EMigD: Migration Classifier. R package version 0.0.2.500, https://jhnhng.github.io/EMigD/.","code":"@Manual{,   title = {EMigD: Migration Classifier},   author = {John Huang},   year = {2022},   note = {R package version 0.0.2.500},   url = {https://jhnhng.github.io/EMigD/}, }"},{"path":"https://jhnhng.github.io/EMigD/index.html","id":"emigd-migration-classifier","dir":"","previous_headings":"","what":"Migration Classifier","title":"Migration Classifier","text":"aim EMigD automate classification individuals, migrant non-migrant, across continuous scale. recommend first looking article “Setting Data”\" articles tab, looking use functions EMigD package shown “Using functions EMigD”. accomplish : collected movement data must first segmented specified time periods (e.g., seasons, months, weeks, days). segmented time periods broken specific intervals (e.g., month can broken weeks week can broken days). Fit rasterize home range interval step 2. output step yield least two utilization distributions (UD) use step 4. Calculate Earth Mover’s Distance (EMD) two UDs created step 3. EMD expected larger migrants compared residents. Calculate “EM-Speeds” dividing EMD time elapsed two UDs. Calculate average within- one specified period step 1, - different periods. ratios two different averages yields unitless value indicate individual migratory spectrum.","code":""},{"path":"https://jhnhng.github.io/EMigD/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Migration Classifier","text":"install current development version EMigD use: devtools::install_github(\"jhnhng/EMigD\")","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/between_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the between seasonal range Earth-mover's distance (EMD) — between_emd","title":"Calculates the between seasonal range Earth-mover's distance (EMD) — between_emd","text":"Calculates seasonal range Earth-mover's distance (EMD)","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/between_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the between seasonal range Earth-mover's distance (EMD) — between_emd","text":"","code":"between_emd(t1, t2)"},{"path":"https://jhnhng.github.io/EMigD/reference/between_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the between seasonal range Earth-mover's distance (EMD) — between_emd","text":"t1 list rasters interval given range. t2 second list raster interval given range compared first list rasters (t1).","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/between_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the between seasonal range Earth-mover's distance (EMD) — between_emd","text":"output list matrices contain EMDs individual given year comparing different intervals.","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/deer.html","id":null,"dir":"Reference","previous_headings":"","what":"Deer in Utah — deer","title":"Deer in Utah — deer","text":"dataset containing GPS data three collared-individuals Utah","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/deer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deer in Utah — deer","text":"","code":"deer"},{"path":"https://jhnhng.github.io/EMigD/reference/deer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Deer in Utah — deer","text":"data frame wtih 3285 rows 6 variables: ID Three individuals: \"\",\"B',\"C date Dates within gregorian calendar, 2013-01-01 2013-31-12 utm_x UTM Easting coordinates utm_y UTM Northing coordinates month Month coordinates recorded jDate Dates within julian calendar","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/emd_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Process UD raster to calculate EMD with pacakge 'transport' — emd_env","title":"Process UD raster to calculate EMD with pacakge 'transport' — emd_env","text":"Process UD raster calculate EMD pacakge 'transport'","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/emd_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process UD raster to calculate EMD with pacakge 'transport' — emd_env","text":"","code":"emd_env(rs1, rs2, nbins = 50)"},{"path":"https://jhnhng.github.io/EMigD/reference/emd_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process UD raster to calculate EMD with pacakge 'transport' — emd_env","text":"rs1 RasterStack two layers: (1) rasterized UD (2) values environmental covariate. rs2 RasterStack two layers: (1) rasterized UD (2) values environmental covariate. nbins numeric vector length == 1 giving number bins discretize environmental space . create sequence min -- max environmental values (ranges combined). Defaults 50.","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/emd_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process UD raster to calculate EMD with pacakge 'transport' — emd_env","text":"EMD rs1 rs2 one dimension environmental space.","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/emd_geo.html","id":null,"dir":"Reference","previous_headings":"","what":"Process UD raster to calculate EMD — emd_geo","title":"Process UD raster to calculate EMD — emd_geo","text":"Process UD raster calculate EMD","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/emd_geo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process UD raster to calculate EMD — emd_geo","text":"","code":"emd_geo(r1, r2)"},{"path":"https://jhnhng.github.io/EMigD/reference/emd_geo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process UD raster to calculate EMD — emd_geo","text":"r1 RasterLayer representing rasterized UD. r2 RasterLayer representing rasterized UD.","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/emd_geo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process UD raster to calculate EMD — emd_geo","text":"Function calculates EMD r1 r2 geographic space.","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/emspeeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Function arguments # — emspeeds","title":"Function arguments # — emspeeds","text":"Function arguments #","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/emspeeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function arguments # — emspeeds","text":"","code":"emspeeds(t1, t2, emd)"},{"path":"https://jhnhng.github.io/EMigD/reference/emspeeds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function arguments # — emspeeds","text":"t1 First list data frames, element represents interval time frame (e.g., first 10-day period second 10-day period winter summer) t2 Second list data frames, element represents interval time frame (e.g., first 10-day period second 10-day period winter summer) @returns Matrices emspeeds (EMDs/Difference two) emd Either time frame (e.g., winter season summer season) emd within-time frame (e.g., first 10-days second 10-days) emd","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/env_raster_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates raster stacks from a environmental covariate layer and home range — env_raster_stack","title":"Creates raster stacks from a environmental covariate layer and home range — env_raster_stack","text":"Creates raster stacks environmental covariate layer home range","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/env_raster_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates raster stacks from a environmental covariate layer and home range — env_raster_stack","text":"","code":"env_raster_stack(env, hrr, attribute = NULL)"},{"path":"https://jhnhng.github.io/EMigD/reference/env_raster_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates raster stacks from a environmental covariate layer and home range — env_raster_stack","text":"env environmental raster layer hrr home range environmental covariate resampled . attribute attribute value environmental layers applied accordingly.","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/env_raster_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates raster stacks from a environmental covariate layer and home range — env_raster_stack","text":"output raster stack contains home ranges environmental covariate layer.","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/match_intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Matches the number of intervals between the two seasons selected — match_intervals","title":"Matches the number of intervals between the two seasons selected — match_intervals","text":"Matches number intervals two seasons selected","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/match_intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matches the number of intervals between the two seasons selected — match_intervals","text":"","code":"match_intervals(list1, list2)"},{"path":"https://jhnhng.github.io/EMigD/reference/match_intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matches the number of intervals between the two seasons selected — match_intervals","text":"list1 list object reference list2 list2 list object length list1 matched ","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/match_intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matches the number of intervals between the two seasons selected — match_intervals","text":"output list intervals list2 object.","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/trekR.html","id":null,"dir":"Reference","previous_headings":"","what":"trekR: A package for classifying migrants — trekR","title":"trekR: A package for classifying migrants — trekR","text":"aim trekR classify individual migrant within given year.","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/within_emd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Earth-Mover's Distance (EMD) within the same range — within_emd","title":"Calculates the Earth-Mover's Distance (EMD) within the same range — within_emd","text":"Calculates Earth-Mover's Distance (EMD) within range","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/within_emd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Earth-Mover's Distance (EMD) within the same range — within_emd","text":"","code":"within_emd(t)"},{"path":"https://jhnhng.github.io/EMigD/reference/within_emd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Earth-Mover's Distance (EMD) within the same range — within_emd","text":"t List rasters containing raster period within nintervals length rasters broken specified interval.","code":""},{"path":"https://jhnhng.github.io/EMigD/reference/within_emd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Earth-Mover's Distance (EMD) within the same range — within_emd","text":"output list matrices contain within- range EMDs","code":""},{"path":[]},{"path":"https://jhnhng.github.io/EMigD/news/index.html","id":"0020000-0-0-2-0000","dir":"Changelog","previous_headings":"","what":"0.0.2.0000 (03/29/2022)","title":"EMigD 0.0.2.0000","text":"added code functions between_emd within_emd allow calculation EMDs even complete number intervals present. Matrices different dimensions work emspeeds. env_raster_stacks works environmental covariates vary temporally.","code":""}]
